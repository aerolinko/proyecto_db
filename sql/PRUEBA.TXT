DROP FUNCTION IF EXISTS get_stock_almacen();

CREATE OR REPLACE FUNCTION get_stock_almacen()
RETURNS TABLE(
  cerveza_presentacion_id INT,
  nombre_cerveza TEXT,
  material TEXT,
  cap_volumen INT,
  cantidad INT
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    cp.cerveza_presentacion_id::INT,
    c.nombre::TEXT,
    p.material::TEXT,
    p.cap_volumen::INT,
    COALESCE(SUM(ac.cantidad), 0)::INT
  FROM almacen_cerveza ac
  JOIN cerveza_presentacion cp ON ac.fk_cerveza_presentacion = cp.cerveza_presentacion_id
  JOIN cerveza c ON cp.fk_cerveza = c.cerveza_id
  JOIN presentacion p ON cp.fk_presentacion = p.presentacion_id
  GROUP BY cp.cerveza_presentacion_id, c.nombre, p.material, p.cap_volumen;
END;
$$ LANGUAGE plpgsql;



DROP FUNCTION IF EXISTS get_stock_anaquel();

CREATE OR REPLACE FUNCTION get_stock_anaquel()
RETURNS TABLE(
  cerveza_presentacion_id INT,
  nombre_cerveza TEXT,
  material TEXT,
  cap_volumen INT,
  cantidad INT
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    cp.cerveza_presentacion_id::INT,
    c.nombre::TEXT,
    p.material::TEXT,
    p.cap_volumen::INT,
    COALESCE(SUM(anac.cantidad), 0)::INT
  FROM anaquel_cerveza anac
  JOIN cerveza_presentacion cp ON anac.fk_cerveza_presentacion = cp.cerveza_presentacion_id
  JOIN cerveza c ON cp.fk_cerveza = c.cerveza_id
  JOIN presentacion p ON cp.fk_presentacion = p.presentacion_id
  GROUP BY cp.cerveza_presentacion_id, c.nombre, p.material, p.cap_volumen;
END;
$$ LANGUAGE plpgsql;


DROP FUNCTION IF EXISTS get_stock_general();

CREATE OR REPLACE FUNCTION get_stock_general()
RETURNS TABLE(
  cerveza_presentacion_id INT,
  nombre_cerveza TEXT,
  material TEXT,
  cap_volumen INT,
  cantidad_total INT
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    cp.cerveza_presentacion_id::INT,
    c.nombre::TEXT,
    p.material::TEXT,
    p.cap_volumen::INT,
    (COALESCE(SUM(ac.cantidad), 0) + COALESCE(SUM(anac.cantidad), 0))::INT AS cantidad_total
  FROM cerveza_presentacion cp
  LEFT JOIN almacen_cerveza ac ON cp.cerveza_presentacion_id = ac.fk_cerveza_presentacion
  LEFT JOIN anaquel_cerveza anac ON cp.cerveza_presentacion_id = anac.fk_cerveza_presentacion
  JOIN cerveza c ON cp.fk_cerveza = c.cerveza_id
  JOIN presentacion p ON cp.fk_presentacion = p.presentacion_id
  GROUP BY cp.cerveza_presentacion_id, c.nombre, p.material, p.cap_volumen;
END;
$$ LANGUAGE plpgsql;

DROP FUNCTION IF EXISTS get_productos_mas_vendidos(DATE, DATE, INTEGER);

CREATE FUNCTION get_productos_mas_vendidos(
    fecha_inicio DATE,
    fecha_fin DATE,
    limite INTEGER
)
RETURNS TABLE (
    producto_id INT,
    nombre_producto TEXT,
    presentacion_ml INT,
    tipo_presentacion TEXT,
    total_ventas INT,
    unidades_vendidas INT,
    precio_promedio NUMERIC,
    ingresos_totales NUMERIC,
    precio_promedio_ponderado NUMERIC,
    clientes_unicos INT,
    primera_venta DATE,
    ultima_venta DATE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.cerveza_id,
        c.nombre,
        p.cap_volumen,
        p.material,
        COUNT(DISTINCT vo.venta_online_id),
        SUM(dvo.cantidad),
        ROUND(AVG(dvo.precio_unitario), 2),
        SUM(dvo.cantidad * dvo.precio_unitario),
        ROUND(SUM(dvo.cantidad * dvo.precio_unitario) / NULLIF(SUM(dvo.cantidad),0), 2),
        COUNT(DISTINCT vo.fk_usuario),
        MIN(vo.fecha_emision),
        MAX(vo.fecha_emision)
    FROM cerveza c
    JOIN cerveza_presentacion cp ON c.cerveza_id = cp.fk_cerveza
    JOIN presentacion p ON cp.fk_presentacion = p.presentacion_id
    JOIN almacen_cerveza ac ON cp.cerveza_presentacion_id = ac.fk_cerveza_presentacion
    JOIN detalle_venta_online dvo ON ac.almacen_cerveza_id = dvo.fk_almacen_cerveza
    JOIN venta_online vo ON dvo.fk_venta_online = vo.venta_online_id
    WHERE 
        (
            (fecha_inicio IS NULL AND fecha_fin IS NULL)
            OR
            (vo.fecha_emision BETWEEN fecha_inicio AND fecha_fin)
        )
    GROUP BY c.cerveza_id, c.nombre, p.cap_volumen, p.material
    ORDER BY unidades_vendidas DESC, ingresos_totales DESC
    LIMIT limite;
END;
$$ LANGUAGE plpgsql;